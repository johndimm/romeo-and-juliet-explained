<goal>
Make a nextjs Progressive Web Appweb to help students read and understand the Shakespeare play Romeo and Juliet.  The app will adapt itself to work well and look good on both wide screens on desktops and tablets and narrow screens on mobile phones.  You can simply click on a word to select the sentence that contains it and submit the sentence to an LLM for an explanation, which is displayed in the same document close to the source passage.  On a wide screen, it will be placed in the left or right margin.  On a narrow screen, it will be placed below the source passage.  The user can print the entire play along with the explanations they requested.
</goal>

<audience>
The intended audience is high school and college students reading Shakespeare in their literature classes, and other adults who read Shakespeare for pleasure.
</audience>

<text selection>
The user will have an easy way to select text to be explained.  A click on a word will select the entire sentence containing the word, not just the line.  You can also click-and-drag to select more or less than a single sentence.
</text selection>

<context>
The selected text will be submitted to an LLM with a prompt that requests an explanation and includes context derived from a structural parse of the document.  The parse lets us know who is speaking and who is on stage at the time.  The speaker is easy to determine by looking at the character name that appears above the selected text.  The characters on stage is more difficult but necessary to determine the listener.  Each scene starts with no one on stage, and then lists the characters that enter.  The exits are also shown in the text, but sometimes the bare word Exit is shown without a list of characters.  In that case, it is the current speaker who is leaving the stage.
</context>

<prompt>
- the selected text
- speaker
- Act number
- Scene number
- characters on stage
</prompt>

<pre-processing>
Can you create a "character map" that makes it easy and reliable to get this information about any passage?  Build a metadata file for this play and a function that takes a byte position in the text file and returns the metadata listed above.  This should be generated to a file using a build Script and read by the app on startup.
</pre-processing>

<table of contents>
The text starts with a list of Acts and Scenes.  These should be changed to links.  The links should go to the actual content, not the TOC itself.  
</table of contents>

<dramatis personae>
The list of characters follows the list of Acts and Scenes.  This must be used while parsing the text for characters on stage, since there may be random words in the Exit and Enter stage directions that are not characters.
</dramatis personae>

<LLM Keys>
Keys for the LLMs are in .env.local
</LLM Keys>

<PWA>
There is no need for caching locally, so no need to create a service worker.
</PWA>

<state storage>
Use localStorage to store everything necessary to restore the state of the system for a user who closes the app and comes back later.  Use localStorage for the position in the document when the user closes the app and to store all the explanations generated by selecting text.
</state storage>

<iterations>

1.  Display the text

The file is romeo-and-juliet.txt.  Each section of text is a series of non-blank lines terminated by one or more blank lines.  Display the section as a pair of columns, one on the left, one on the right.  The left column is the text of the play.  The right column will contain the "explanations". Add a margin to replace the blank lines.

The text in each section should be displayed pre-formatted by using a <pre> tag.  Use the font-family: "IM Fell English", serif.

2.  Search interface

Create a search interface, using this method:

- Highlight Search Results: When a user performs a search, identify all occurrences of the search term and wrap them in a <span> or other element with a distinct class (e.g., highlight).

- Navigate Between Results: Provide "next" and "previous" buttons or similar controls. When these are clicked, find the next or previous highlighted element in the DOM.

- Scroll to the Found Element: Use the scrollIntoView() method on the currently selected or navigated-to highlighted element.

The search UI should fit on a single line.  It needs to be on screen at all times rather than scrolling off.

3.  Character map

First, parse the Dramatis Personae neare the top of the file.  The speaking characters have names in ALL CAPS, but are referred in other context with mixed case.

The map is a spreadsheet where the columns are characters and the rows are positions in the text where a character either appears on stage or exits the stage.  Each cell has 1 if the character is on stage at that point in the play.  Create it as a CSV file so I can browse it as a spreadsheet.  The rows should also show the Act and Scene of each row and the character offset and line number.

Be sure to track not just the Enter stage directions but also Exit and Exeunt.  

When parsing the character list for an Enter or Exit, check every character to see if it is contained in the string.  There may be stopwords and skipping them all is not a good approach.

Two rules about characters on stage:  1) each scene starts with an empty stage, 2) an Exit with no character name after it refers to the current speaker.

4.  Table of contents

Create a left sidebar that shows the acts and scenes in the play, linked to the actual location in the body of the text.  Remove the toc from the body to avoid matching to it.  Highlight the toc location in the sidebar as the user scrolls through the text.  Use the character map to find the correct toc entry for a given scroll position.

5.  Text selection

Click to select sentence.  I click on a word and at runtime the app scans left for the start of the sentence and scans right for the end.  Highlight the selected sentence.  

Also, allow click-drag to select more or less than a sentence.

6.  Display selected text

Put the selected text in the right margin.  Later, that will be where we add the explanations, but for now it can be just the passage itself.  

Add the context for the LLM.

7.  Get AI explanations

Submit the selected text, with context, to the LLM.  Request that it explain the quote from Romeo and Juliet.  The first explanation should be brief, but there will be a way to ask for more.  There will be a way to ask a follow-up question.  

</iterations>

